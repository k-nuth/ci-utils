on:
  workflow_call:
    inputs:
      if:
        description: 'Whether to run this job'
        required: true
        type: boolean
      upload:
        description: 'Have to upload the package'
        required: true
        type: boolean
      os:
        required: true
        type: string
      image:
        required: true
        type: string
      recipe-name:
        required: true
        type: string
      conan-remote:
        required: true
        type: string
      compiler:
        required: true
        type: string
      compiler-version:
        required: true
        type: string
      version-file:
        required: true
        type: string
      build-version:
        required: true
        type: string
    secrets:
      CONAN_LOGIN_USERNAME:
        required: true
      CONAN_PASSWORD:
        required: true
jobs:
  reusable-build-with-container:
    if: ${{ inputs.if }}
    runs-on: ${{ inputs.os }}
    container:
      image: ${{ inputs.image }}
    steps:
      - run: |
          echo "inputs.conan-remote: ${{ inputs.conan-remote }}"
          echo "inputs.if: ${{ inputs.if }}"
          echo "inputs.os: ${{ inputs.os }}"
          echo "inputs.image: ${{ inputs.image }}"

          echo "inputs.conan-remote:       ${{ inputs.conan-remote }}"
          echo "inputs.recipe-name:        ${{ inputs.recipe-name }}"

          echo "inputs.compiler:           ${{ inputs.compiler }}"
          echo "inputs.compiler-version:   ${{ inputs.compiler-version }}"

          echo "inputs.version-file:       ${{ inputs.version-file }}"
          echo "inputs.upload:             ${{ inputs.upload }}"
          # echo "github.event_name:         ${{ github.event_name }}"


      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/cache@v3
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
      # - uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}



      - uses: ./ci_utils/.github/actions/setup-conan
      - uses: ./ci_utils/.github/actions/setup-kthbuild
      - uses: lukka/get-cmake@latest

      # - uses: github/codeql-action/init@v2
      #   with:
      #     languages: 'cpp'

      - uses: ./ci_utils/.github/actions/replace-version
        with:
          new-version: ${{ inputs.build-version }}
          target-file: ${{ inputs.version-file }}


      - name: build
        working-directory: .
        # This should not be logged in to conan remote since we are building for ubuntu the binaries are available in CCI
        run: |
          # conan remote disable ${{ inputs.conan-remote }}
          # conan profile show default
          conan remote login -p ${{ secrets.CONAN_PASSWORD }} ${{ inputs.conan-remote }} ${{ secrets.CONAN_LOGIN_USERNAME }}
          conan remote list
          conan lock create conanfile.py --version ${{ inputs.build-version }} --lockfile=conan.lock --lockfile-out=build/conan.lock -pr:b linux-ci-cd -pr:h linux-ci-cd
          conan create conanfile.py --version ${{ inputs.build-version }} --lockfile=build/conan.lock -pr:b linux-ci-cd -pr:h linux-ci-cd --build=missing

      # - uses: github/codeql-action/analyze@v2

      - name: upload
        # if: github.event_name == 'push' && needs.check.outputs.permitted == 'true'
        if: ${{ inputs.upload }}
        run: |
          # conan remote enable ${{ inputs.conan-remote }}
          conan remote login -p ${{ secrets.CONAN_PASSWORD }} ${{ inputs.conan-remote }} ${{ secrets.CONAN_LOGIN_USERNAME }}
          conan upload ${{ inputs.recipe-name }}/${{ inputs.build-version }}@ -r ${{ inputs.conan-remote }} # --all
