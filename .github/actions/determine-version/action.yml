name: 'Determine Version'
description: 'Calculates the version tag based off the git reference. SemVer tags are presevered, default branch is latest, other branch are untouched, PRs output alternate ID'
inputs:
  github-ref:
    description: 'The current reference point for the version'
    required: true
  # unique-alt-id:
  #   description: 'The version to return when it is pull request'
  #   required: true
  run-number:
    description: 'Github Run Number'
    required: true


outputs:
  build-version:
    description: "Build Version"
    value: ${{ steps.cal.outputs.version }}
runs:
  using: "composite"
  steps:
  - id: cal
    run: |
      LAST_TAG=$(git tag -l --sort=-creatordate | head -n 1)
      echo "LAST_TAG: $LAST_TAG"
      LAST_TAG=$(echo $LAST_TAG | sed -e 's/^v//')
      echo "LAST_TAG: $LAST_TAG"
      [[ "$LAST_TAG" == "" ]] && LAST_TAG="0.0.0"

      VERSION=$(echo "${{ inputs.github-ref }}" | sed -e 's,.*/\(.*\),\1,')
      [[ "${{ inputs.github-ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

      # [ "$VERSION" == "main" ] && VERSION=latest
      # [ "$VERSION" == "master" ] && VERSION=latest
      # [ "$VERSION" == "dev" ] && VERSION=test
      # [ "$VERSION" == "merge" ] && VERSION=$(echo "${{ inputs.unique-alt-id }}")

      # "0.16.0-commit.${{ github.run_number }}"
      [ "$VERSION" == "main" ] && VERSION=$(echo "$LAST_TAG-commit.${{ inputs.run-number }}")
      [ "$VERSION" == "master" ] && VERSION=$(echo "$LAST_TAG-commit.${{ inputs.run-number }}")
      [ "$VERSION" == "dev" ] && VERSION=$(echo "$LAST_TAG-commit.${{ inputs.run-number }}")
      [ "$VERSION" == "merge" ] && VERSION=$(echo "$LAST_TAG-commit.${{ inputs.run-number }}")

      echo "VERSION: $VERSION"

      echo "version=$VERSION" >> $GITHUB_OUTPUT
    shell: bash
